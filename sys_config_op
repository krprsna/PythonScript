#!/usr/bin/env python

# sys_cfg_utility
#
# This program was created to help to collect the server configuration details.
# It was created for personal use. There are no guarantees of the author
# Use at your own risk.
#
# Permission to use, copy, modify, and distribute this software for any
# purpose without fee.
#
# Again, USE AT YOUR OWN RISK.
#
# This works on Red hat Linux 5, 6 and 7 Version.
# This will collect, system config details and sos report. The data will then transferd to the server provided in script.
#
# Please modify the user_id, Server name and other details, if you want to use this script.


#### IMPORTING MODULES

import sys
import subprocess
import time
import os
import socket
import fnmatch
from subprocess import Popen, PIPE

#### PYTHON VERSION CHECK

#def py_ver_chk():
#    py_ver = sys.version_info
#    if py_ver[0] == "2" and py_ver[1] <= "4":
#        sys.exit()
#    elif py_ver[0] == "2" and py_ver[1] >= "5":
#        pass
#py_ver_chk()

print "___________________________________________________________________________________________________________"
print "|                                                   NOTE                                                  |"
print "|                                                                                                         |"
print "|SERVER CONFIGURATION DETAILS AND SOSREPORT WILL BE COPIED TO <servername> SERVER UNDER /tmp/server_output|"
print "|                                                                                                         |"
print "|                     COPY OF THE CONFIGURATION DETAILS WILL BE SENT TO YOUR MAIL ID.                     |"
print "|                                                                                                         |"
print "|   THIS SCRIPT WORKS ON RHEL5, 6 AND 7. THE CONFIG DETAILS WILL NOT BE SENT TO YOUR MAIL ID IN RHEL5.    |"
print "|_________________________________________________________________________________________________________|"

#### INPUT USER ID FROM USER TO SCP THE OUTPUT FILE TO JUMP HOST AND A COPY TO MAIL

def get_mail_user():

    current_pwd = os.getcwd()

    hn = socket.gethostname()
    times = time.strftime("%d%B%Y-%H%M%S")
    filename = hn+times

    rh_rel = "cat","/etc/redhat-release"
    os_rel = subprocess.Popen(rh_rel, stdout=subprocess.PIPE).communicate()[0]
    os_ver = os_rel.split(' ')[6]

#    mail_id = ''
#    while not (mail_id[-9:] == 'gmail.com' or mail_id[-9:] == 'yahoo.com'):
#        mail_id = raw_input("Enter mailID: ").lower()

    user_id = ''
    while not (user_id == 'user1' or user_id == 'user2' or user_id = 'user3):
        user_id = raw_input("Enter userID : ").lower()

    rm_sos_old = "sosreport"+"*.tar.bz2*"
    rm_file = fnmatch.filter(os.listdir('.'),rm_sos_old)

    if os_ver >= "6.0":
        pass
    else:
        os.chdir("/tmp")
        for i in rm_file:
            os.remove(i)

    os.chdir(current_pwd)

#### SERVER CONFIGURATION FILES

    def cfg_op():

        f = open(filename+".txt", 'w+')
        sys.stdout = f

        print "-----------------------------------------------------------------------------------"
        print "|||||||||||||||||||||||||||||||||||Server Output|||||||||||||||||||||||||||||||||||"
        print "-----------------------------------------------------------------------------------"
        f.read()
        print "Today's date-time is:", times
        print "------------------------------------------------------------"

        uptime = "uptime"
        print "uptime"
        print "------"
        f.read()
        subprocess.call(uptime, stdout = f)
        print "------------------------------------------------------------"

        uname = "uname","-a"
        print "uname -a"
        print "--------"
        f.read()
        subprocess.call(uname, stdout = f)
        print "------------------------------------------------------------"

        rh_rel = "cat","/etc/redhat-release"
        print "cat /etc/redhat-release"
        print "-----------------------"
        f.read()
        subprocess.call(rh_rel, stdout = f)
        print "------------------------------------------------------------"

        if os_ver >= "7.0":
            grub2_file = "cat","/boot/grub2/grub.cfg"
            print "cat /boot/grub2/grub.cfg"
            print "------------------------"
            f.read()
            subprocess.call(grub2_file, stdout = f)
            print "------------------------------------------------------------"
        else:
            grub_file = "cat","/boot/grub/grub.conf"
            print "cat /boot/grub/grub.conf"
            print "------------------------"
            f.read()
            subprocess.call(grub_file, stdout = f)
            print "------------------------------------------------------------"

        df = "df","-h"
        print "df -h"
        print "-----"
        f.read()
        subprocess.call(df, stdout = f)
        print "------------------------------------------------------------"

        fstab = "cat","/etc/fstab"
        print "cat /etc/fstab"
        print "--------------"
        f.read()
        subprocess.call(fstab, stdout = f)
        print "------------------------------------------------------------"

        mount_cmd = "cat","/proc/mounts"
        print "cat /proc/mounts"
        print "----------------"
        f.read()
        subprocess.call(mount_cmd, stdout = f)
        print "------------------------------------------------------------"

        pv_s = "pvscan"
        print "pvscan"
        print "------"
        f.read()
        subprocess.call(pv_s, stdout = f)
        print "------------------------------------------------------------"

        vg_s = "vgscan"
        print "vgscan"
        print "------"
        f.read()
        subprocess.call(vg_s, stdout = f)
        print "------------------------------------------------------------"

        lv_s = "lvscan"
        print "lvscan"
        print "------"
        f.read()
        subprocess.call(lv_s, stdout = f)
        print "------------------------------------------------------------"

        vgdisp = "vgdisplay","-v"
        print "vgdisplay -v"
        print "------------"
        f.read()
        subprocess.call(vgdisp, stdout = f)
        print " -----------------------------------------------------------"

        fdisk = "fdisk","-l"
        print "fdisk -l"
        print "--------"
        f.read()
        subprocess.call(fdisk, stdout = f)
        print "-------------------------------------------------------------"

        free = "free","-tm"
        print "free -tm"
        print "--------"
        f.read()
        subprocess.call(free, stdout = f)
        print "------------------------------------------------------------"

        if os_ver >= "6.0":
            ls_cpu = "lscpu"
            print "lscpu"
            print "-----"
            f.read()
            subprocess.call(ls_cpu, stdout = f)
            print "------------------------------------------------------------"
        else:
            pass

        ipadd = "ifconfig"
        print "ifconfig"
        print "--------"
        f.read()
        subprocess.call(ipadd, stdout =f)
        print "------------------------------------------------------------"

        netstat = "netstat","-rn"
        print "netstat -rn"
        print "-----------"
        f.read()
        subprocess.call(netstat, stdout = f)
        print "------------------------------------------------------------"

        nw_cfg_file = "cat","/etc/sysconfig/network"
        print "cat /etc/sysconfig/network"
        print "--------------------------"
        f.read()
        subprocess.call(nw_cfg_file, stdout = f)
        print "-------------------------------------------------------------"

        bond_eth_fn = "ifcfg-"+"*"
        os.chdir("/etc/sysconfig/network-scripts")
        bond_eth_file = fnmatch.filter(os.listdir('.'),bond_eth_fn)
        f.read()
        for i in bond_eth_file:
            print "--------"+i+"--------"
            f.read()
            subprocess.call(["cat", i], stdout = f)
        print "-------------------------------------------------------------"
        os.chdir(current_pwd)

        if os_ver >= "7.0":
            sysctl_list = "systemctl","list-unit-files"
            print "systemctl list-unit-files"
            print "-------------------------"
            f.read()
            subprocess.call(sysctl_list, stdout = f)
            print "------------------------------------------------------------"
        else:
            chkcfg_cmd = "chkconfig","--list"
            print "chkconfig --list"
            print "----------------"
            f.read()
            subprocess.call(chkcfg_cmd, stdout = f)
            print "------------------------------------------------------------"

        lspci_cmd = "lspci"
        print "lspci"
        print "-----"
        f.read()
        subprocess.call(lspci_cmd, stdout = f)
        print "------------------------------------------------------------"

        dmidecode = "dmidecode","-t","system"
        dmidecode_full = "dmidecode"
        print "dmidecode -t system"
        print "-------------------"
        f.read()
        subprocess.call(dmidecode, stdout = f)
        print "------------------------------------------------------------"

        print "dmidecode"
        print "---------"
        f.read()
        subprocess.call(dmidecode_full, stdout = f)
        print "------------------------------------------------------------"

        os.system('sosreport')

        f.close()

    cfg_op()

#### TRANSFER THE OUTPUT FILE AND SOSREPORT TO JUMP HOST UNDER /tmp/server_output
#### TRANSFER THE OUTPUT FILE TO MAIL ID

    user = user_id
    src_file = filename+".txt"
    dst_srv = "@<server name>:/tmp/server_output"
    subprocess.call(['scp', '-q', src_file, user+dst_srv])

    if os_ver >= "6.0":
        recipient = user+"@<domain>.com"
        sub = "Output of "+filename
        op_file = filename+".txt"
        body = "Server configuration output attached"
        SendMail = subprocess.Popen(['mail', '-s', sub, '-a', op_file, recipient], stdin=subprocess.PIPE)
        SendMail.communicate(body)
    else:
        pass

    if os_ver >= "7.0":
        os.chdir("/var/tmp")
    else:
        os.chdir("/tmp")
    sos_date = time.strftime("%Y%m%d")
    dst_srv1 = "@<server name>:/tmp/server_output"
    sos_xz = "*"+sos_date+"*.tar.xz"
    sos_gz = "*"+sos_date+"*.tar.gz"
    sos_bz2 = "sosreport"+"*.tar.bz2"
    match_fn_xz = fnmatch.filter(os.listdir('.'),sos_xz)
    match_fn_gz = fnmatch.filter(os.listdir('.'),sos_gz)
    match_fn_bz2 = fnmatch.filter(os.listdir('.'),sos_bz2)
    for i in match_fn_xz:
        subprocess.call(["scp", "-q", i, user+dst_srv1])
    for i in match_fn_gz:
        subprocess.call(["scp", "-q", i, user+dst_srv1])
    for i in match_fn_bz2:
        subprocess.call(["scp", "-q", i, user+dst_srv1])

    os.chdir(current_pwd)

get_mail_user()
